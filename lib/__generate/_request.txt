'use strict'
const $RequestService = require('../../services/$RequestService');
const $RequestModel = require('../../model/$RequestModel');
const { genericResponse, genericResponseError,convertToNumber,extractPaginationParameters } = require("../../utils/utils");

// save
module.exports.create = async (event, context) => {
  try {
    // programming logic
    await $RequestService.Create$Request($RequestClass);
    return genericResponse(200); // return success 
  } catch (error) {
    // return exception
    return genericResponseError(400, error);
  }
}

// update
module.exports.update = async (event, context) => {
  try {
    // programming logic
    let $RequestClassid = await convertToNumber(event.pathParameters.$RequestClassid, '$RequestClassid');
    await $RequestService.Update$Request($RequestClass,$RequestClassid);
    return genericResponse(204); // return success 
  } catch (error) {
    // return exception
    return genericResponseError(400, error);
  }
}

// lists by ID
module.exports.get = async (event, context) => {
  try {
    // programming logic
    let $RequestClassid = await convertToNumber(event.pathParameters.$RequestClassid, '$RequestClassid');
    let $Request = await $RequestService.Get$Request($RequestClassid);
    return genericResponse(201, $Request); // return success 
  } catch (error) {
    // return exception
    return genericResponseError(400, error);
  }
}

// lists all
module.exports.getAll = async (event, context) => {
  try {
    // programming logic
    let pagination = extractPaginationParameters(event);    
    let $Request = await $RequestService.GetAll$Request(pagination.offset, pagination.limit);
    return genericResponse(201, $Request); // return success 
  } catch (error) {
    // return exception
    return genericResponseError(400, error);
  }
}

// delete
module.exports.delete = async (event, context) => {
  try {
    // programming logic
    let $RequestClassid = await convertToNumber(event.pathParameters.$RequestClassid, '$RequestClassid');
    await $RequestService.Delete$Request($RequestClassid);
    return genericResponse(204); // return success 
  } catch (error) {
    // return exception
    return genericResponseError(400, error);
  }
}